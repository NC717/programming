sizes_control    <- 10072#
sizes_experiment <- 9886#
count_control    <- 974#
count_experiment <- 1242
p <- ( count_control + count_experiment ) / ( sizes_experiment + sizes_control )
p
p_control <- count_control / sizes_control#
p_experiment <- count_experiment / sizes_experiment
( count_control + count_experiment ) / ( sizes_experiment + sizes_control )
p <- ( count_control + count_experiment ) / ( sizes_experiment + sizes_control )
sqrt( p * ( 1 - p ) * ( 1 / sizes_control + 1 / sizes_experiment ) )
p_experiment - p_control
sterror <- sqrt( p * ( 1 - p ) * ( 1 / sizes_control + 1 / sizes_experiment ) )
sterror
d
d <- p_experiment - p_control
d + c( -1, 1 ) * 1.96 * sterror
ABTest <- function( count_control = count_control, sizes_control = sizes_control,#
                    count_experiment = count_experiment, sizes_experiment = sizes_experiment )#
{#
    # probability of each group #
    p_control <- count_control / sizes_control#
    p_experiment <- count_experiment / sizes_experiment#
#
    # pooled probability #
    p <- ( count_control + count_experiment ) / ( sizes_experiment + sizes_control )#
#
    # pooled standard deviation #
    sterror <- sqrt( p * ( 1 - p ) * ( 1 / sizes_control + 1 / sizes_experiment ) )#
#
    return( ( p_experiment - p_control ) + c( -1, 1 ) * 1.96 * sterror )#
}#
#
estimate <- ABTest( count_control = count_control, #
                    sizes_control = sizes_control,#
                    count_experiment = count_experiment, #
                    sizes_experiment = sizes_experiment )
estimate
p_experiment - p_control
1.96 * std_error
std_error <- sqrt( p * ( 1 - p ) * ( 1 / sizes_control + 1 / sizes_experiment ) )
1.96 * std_error
p_experiment - p_control
ABTest <- function( count_control = count_control, #
                    sizes_control = sizes_control,#
                    count_experiment = count_experiment, #
                    sizes_experiment = sizes_experiment )#
{#
    # probability of each group #
    p_control <- count_control / sizes_control#
    p_experiment <- count_experiment / sizes_experiment#
#
    # @p : pooled probability#
    # @std_error pooled standard deviation (error ) #
    p <- ( count_control + count_experiment ) / ( sizes_experiment + sizes_control )#
    std_error <- sqrt( p * ( 1 - p ) * ( 1 / sizes_control + 1 / sizes_experiment ) )#
#
    # 95 percent confidence interval's z score = 1.96#
    difference <- p_experiment - p_control#
    confidence <- difference + c( -1, 1 ) * 1.96 * std_error#
    return( c( confidence[1], difference, confidence[2] ) )#
}#
#
confidence <- ABTest( count_control = count_control, #
                      sizes_control = sizes_control,#
                      count_experiment = count_experiment, #
                      sizes_experiment = sizes_experiment )#
confidence
library(ggplot2)
confidence
data.frame( confidence )
ABTest <- function( count_control = count_control, #
                    sizes_control = sizes_control,#
                    count_experiment = count_experiment, #
                    sizes_experiment = sizes_experiment )#
{#
    # probability of each group #
    p_control <- count_control / sizes_control#
    p_experiment <- count_experiment / sizes_experiment#
#
    # @p : pooled probability#
    # @std_error pooled standard deviation (error ) #
    p <- ( count_control + count_experiment ) / ( sizes_experiment + sizes_control )#
    std_error <- sqrt( p * ( 1 - p ) * ( 1 / sizes_control + 1 / sizes_experiment ) )#
#
    # 95 percent confidence interval's z score = 1.96#
    difference <- p_experiment - p_control#
    confidence <- difference + c( -1, 1 ) * 1.96 * std_error#
#
    return( data.frame( confidence[1], difference, confidence[2] ) )#
}#
#
confidence <- ABTest( count_control = count_control, #
                      sizes_control = sizes_control,#
                      count_experiment = count_experiment, #
                      sizes_experiment = sizes_experiment )
confidence
ABTest <- function( count_control = count_control, #
                    sizes_control = sizes_control,#
                    count_experiment = count_experiment, #
                    sizes_experiment = sizes_experiment )#
{#
    # probability of each group #
    p_control <- count_control / sizes_control#
    p_experiment <- count_experiment / sizes_experiment#
#
    # @p : pooled probability#
    # @std_error pooled standard deviation (error ) #
    p <- ( count_control + count_experiment ) / ( sizes_experiment + sizes_control )#
    std_error <- sqrt( p * ( 1 - p ) * ( 1 / sizes_control + 1 / sizes_experiment ) )#
#
    # 95 percent confidence interval's z score = 1.96#
    difference <- p_experiment - p_control#
    confidence <- difference + c( -1, 1 ) * 1.96 * std_error#
#
    return( data.frame( lower = confidence[1], #
                        mean  = difference,#
                        upper = confidence[2] ) )#
}#
#
confidence <- ABTest( count_control = count_control, #
                      sizes_control = sizes_control,#
                      count_experiment = count_experiment, #
                      sizes_experiment = sizes_experiment )
confidence
ggplot( confidence, aes( mean, 1 ) ) + #
geom_point()
ggplot( confidence, aes( mean, 1 ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ) )
?geom_errorbarh
ggplot( confidence, aes( mean, 1 ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper, height = 0.2 ) )
ggplot( confidence, aes( mean, 1 ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper, height = 0.01 ) )
?geom_vline
ggplot( confidence, aes( mean, 1 ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper, height = 0.01 ) ) + #
geom_vline( xintercept = 0 ) + #
geom_vline( xintercept = delta ) + #
geom_vline( xintercept = -delta )
ggplot( confidence, aes( mean, 1 ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.01 ) + #
geom_vline( xintercept = 0 ) + #
geom_vline( xintercept = delta ) + #
geom_vline( xintercept = -delta )
ggplot( confidence, aes( mean, 1 ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), width = 0.01 ) + #
geom_vline( xintercept = 0 ) + #
geom_vline( xintercept = delta ) + #
geom_vline( xintercept = -delta )
ggplot( confidence, aes( mean, 1 ) ) + #
geom_point() + #
geom_errorbar( aes( xmin = lower, xmax = upper ), width = 0.01 ) + #
geom_vline( xintercept = 0 ) + #
geom_vline( xintercept = delta ) + #
geom_vline( xintercept = -delta )
?geom_errorbarh
as.factor( 1:5 )
ggplot( confidence, aes( mean, 1 ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.01 ) + #
geom_vline( xintercept = 0, color = "blue" ) + #
geom_vline( xintercept = delta, color = "cyan" ) + #
geom_vline( xintercept = -delta, color = "cyan" )
ggplot( confidence, aes( mean, 1 ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.01 ) + #
geom_vline( xintercept = 0, color = "blue" ) + #
geom_vline( xintercept = delta, color = "cyan4" ) + #
geom_vline( xintercept = -delta, color = "cyan4" )
ggplot( confidence, aes( mean, 1 ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.01 ) + #
geom_vline( xintercept = 0, color = "blue" ) + #
geom_vline( xintercept = delta, color = "cyan4", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "cyan4", linetype = "dotted" )
ggplot( confidence, aes( mean, 1 ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.01 ) + #
geom_vline( xintercept = 0, color = "blue" ) + #
geom_vline( xintercept = delta, color = "cyan4" ) + #
geom_vline( xintercept = -delta, color = "cyan4" )
ggplot( confidence, aes( mean, "1" ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.01 ) + #
geom_vline( xintercept = 0, color = "blue" ) + #
geom_vline( xintercept = delta, color = "cyan4" ) + #
geom_vline( xintercept = -delta, color = "cyan4" )
ggplot( confidence, aes( mean, "1" ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "blue" ) + #
geom_vline( xintercept = delta, color = "cyan4" ) + #
geom_vline( xintercept = -delta, color = "cyan4" )
ggplot( confidence, aes( mean, "1" ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" )
examples <- data.frame( scenario, lower, mean, upper )
scenario <- as.factor( 2:3 )#
lower <- c( -0.5, 0.1 )#
mean  <- c( 0.1, 0.15 )#
upper <- c( 0.15, 0.18 )#
#
examples <- data.frame( scenario, lower, mean, upper )
examples
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( as.factor(1), confidence ), examples )
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( scenario = as.factor(1), confidence ), examples )
examples
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" )
scenario <- as.factor( 2:3 )#
lower <- c( -0.05, 0.1 )#
mean  <- c( 0.1, 0.15 )#
upper <- c( 0.15, 0.18 )#
#
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( scenario = as.factor(1), confidence ), examples )#
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" )
confidence
?sample
scenario <- as.factor( 2:3 )#
lower <- c( -0.008, 0.01   )#
mean  <- c( 0.01, 0.015 )#
upper <- c( 0.018, 0.018 )#
#
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( scenario = as.factor(1), confidence ), examples )#
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" )
examples
examples$scenario
levels( examples$scenario ) <- 3:1
examples$scenario
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" )
ggplot( examples, aes( mean, reorder( scenario, -scenario ), color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" )
as.character(2:3)
scenario <- as.character(2:3)#
lower <- c( -0.008, 0.01   )#
mean  <- c( 0.01, 0.015 )#
upper <- c( 0.018, 0.018 )#
#
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( scenario = "1", confidence ), examples )#
examples <- factor( examples$scenario, levels = c( "3", "2", "1" ) )#
#
ggplot( examples, aes( mean, reorder( scenario, -scenario ), color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" )
scenario <- as.character(2:3)#
lower <- c( -0.008, 0.01   )#
mean  <- c( 0.01, 0.015 )#
upper <- c( 0.018, 0.018 )#
#
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( scenario = "1", confidence ), examples )#
examples$scenario <- factor( examples$scenario, levels = c( "3", "2", "1" ) )#
#
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" )
scenario <- as.character(2:3)#
lower <- c( -0.008, 0.01   )#
mean  <- c( 0.01, 0.015 )#
upper <- c( 0.018, 0.018 )#
#
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( scenario = "1", confidence ), examples )#
# examples$scenario <- factor( examples$scenario, levels = c( "3", "2", "1" ) )#
#
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" )
scenario <- as.character(2:3)#
lower <- c( -0.008, 0.01   )#
mean  <- c( 0.01, 0.015 )#
upper <- c( 0.018, 0.018 )#
#
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( scenario = "1", confidence ), examples )#
examples$scenario <- factor( examples$scenario, levels = c( "3", "2", "1" ) )#
#
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" )
scenario <- as.character(2:5)#
lower <- c( -0.008, 0.01, -0.025, -0.005, 0.015   )#
mean  <- c( 0.01, 0.015, 0.005, 0.025, 0.025 )#
upper <- c( 0.018, 0.018, 0.03, 0.04, 0.03 )#
#
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( scenario = "1", confidence ), examples )#
examples$scenario <- factor( examples$scenario, levels = c( "3", "2", "1" ) )#
#
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" )
scenario <- as.character(2:5)#
lower <- c( -0.008, 0.01, -0.025, -0.005, 0.015   )#
mean  <- c( 0.01, 0.015, 0.005, 0.025, 0.025 )#
upper <- c( 0.018, 0.018, 0.03, 0.04, 0.03 )#
#
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( scenario = "1", confidence ), examples )#
examples$scenario <- factor( examples$scenario, levels = as.character(5:1) )#
#
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" )
scenario <- as.character(2:6)#
lower <- c( -0.008, 0.01, -0.025, -0.005, 0.015   )#
mean  <- c( 0.01, 0.015, 0.005, 0.025, 0.025 )#
upper <- c( 0.018, 0.018, 0.03, 0.04, 0.03 )#
#
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( scenario = "1", confidence ), examples )#
examples$scenario <- factor( examples$scenario, levels = as.character(6:1) )#
#
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" )
# fixed artifical plot#
# using delta = 0.02 as the minimum detectable boundary #
library(ggplot2)#
#
scenario <- as.character(2:6)#
lower <- c( -0.008, 0.01, -0.025, -0.005, 0.015   )#
mean  <- c( 0.01, 0.015, 0.005, 0.025, 0.025 )#
upper <- c( 0.018, 0.018, 0.03, 0.04, 0.03 )#
#
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( scenario = "1", confidence ), examples )#
examples$scenario <- factor( examples$scenario, levels = as.character(6:1) )#
#
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" )
baseline  <- 0.1  # baseline conversion rate #
delta     <- 0.02 # minimum detectable boundary ( practical significance boundary )#
power     <- 0.8  # sensitivity #
sig_level <- 0.05 # specificity #
#
result <- power.prop.test( p1 = baseline, p2 = baseline + delta, #
                           power = power, sig.level = sig_level,#
                           alternative = "two.sided" )#
result$n
count_control    <- 974#
sizes_control    <- 10072#
count_experiment <- 1242#
sizes_experiment <- 9886#
#
ABTest <- function( count_control = count_control, #
                    sizes_control = sizes_control,#
                    count_experiment = count_experiment, #
                    sizes_experiment = sizes_experiment )#
{#
    # probability of each group #
    p_control <- count_control / sizes_control#
    p_experiment <- count_experiment / sizes_experiment#
#
    # @p : pooled probability#
    # @std_error pooled standard deviation (error ) #
    p <- ( count_control + count_experiment ) / ( sizes_experiment + sizes_control )#
    std_error <- sqrt( p * ( 1 - p ) * ( 1 / sizes_control + 1 / sizes_experiment ) )#
#
    # 95 percent confidence interval's z score = 1.96#
    difference <- p_experiment - p_control#
    confidence <- difference + c( -1, 1 ) * 1.96 * std_error#
#
    return( data.frame( lower = confidence[1], #
                        mean  = difference,#
                        upper = confidence[2] ) )#
}#
#
confidence <- ABTest( count_control = count_control, #
                      sizes_control = sizes_control,#
                      count_experiment = count_experiment, #
                      sizes_experiment = sizes_experiment )
confidence
library(ggplot2)#
#
scenario <- as.character(2:6)#
lower <- c( -0.008, 0.01, -0.025, -0.005, 0.015   )#
mean  <- c( 0.01, 0.015, 0.005, 0.025, 0.025 )#
upper <- c( 0.018, 0.018, 0.03, 0.04, 0.03 )#
#
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( scenario = "1", confidence ), examples )#
examples$scenario <- factor( examples$scenario, levels = as.character(6:1) )#
#
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" )
scenario <- as.character(2:6)#
lower <- c( -0.008, 0.01, -0.025, -0.005, 0.015   )#
mean  <- c( 0.01, 0.015, 0.005, 0.025, 0.025 )#
upper <- c( 0.018, 0.018, 0.03, 0.04, 0.03 )
examples <- data.frame( scenario, lower, mean, upper )
examples
rbind( cbind( scenario = "1", confidence ), examples )
factor( examples$scenario, levels = as.character(6:1) )
examples <- rbind( cbind( scenario = "1", confidence ), examples )
factor( examples$scenario, levels = as.character(6:1) )
examples$scenario <- factor( examples$scenario, levels = as.character(6:1) )
examples$scenario
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" ) +#
scale_color_discrete( breaks = as.character(1:6) +  #
labs( title = "Different Scenarios of Confidence Interval",#
      x = "confidence interval" )
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" ) +#
scale_color_discrete( breaks = as.character(1:6) ) +  #
labs( title = "Different Scenarios of Confidence Interval",#
      x = "confidence interval" )
?formatC
set.seed(10)
paste('cohort', formatC(c(1:36), width=2, format='d', flag='0')
)
cohorts <- data.frame( #
#
    cohort = paste( "cohort", formatC( c(1:36), width = 2, format = "d", flag = "0" ), sep = "_" ),#
    Y_00 = sample( c(1300:1500), 36, replace = TRUE ),#
    Y_01 = c( sample( c(800:1000), 36, replace = TRUE ) ),#
    Y_02 = c( sample( c(600:800), 24, replace = TRUE ), rep( NA, 12 ) ),#
    Y_03 = c( sample( c(400:500), 12, replace = TRUE ), rep( NA, 24 ) )#
)
cohorts
as.integer( cohorts * 1.25 )
formatC( c(1:36), width = 2, format = "d", flag = "0" )
cohorts[ c(11, 23, 35), 2 ] <- as.integer( cohorts[c(11, 23, 35), 2] * 1.25 )#
cohorts[ c(11, 23, 35), 3 ] <- as.integer( cohorts[c(11, 23, 35), 3] * 1.10 )#
cohorts[ c(11, 23, 35), 4 ] <- as.integer( cohorts[c(11, 23, 35), 4] * 1.07 )
cohorts
melt( cohorts, id.vars = "cohort", value.name = "number", variable.name = "year_of_LT" )
library(data.table)
melt( cohorts, id.vars = "cohort", value.name = "number", variable.name = "year_of_LT" )
df_plot <- melt( cohorts, id.vars = "cohort", value.name = "number", variable.name = "year_of_LT" )
cohorts
head(df_plot)
df_plot <- df_plot %>%#
group_by(cohort) %>%#
arrange(year_of_LT) %>%#
mutate(number_prev_year = lag(number),#
number_Y_00 = number[which(year_of_LT == 'Y_00')]) %>%#
ungroup() %>%#
mutate(ret_rate_prev_year = number / number_prev_year,#
ret_rate = number / number_Y_00,#
year_cohort = paste(year_of_LT, cohort, sep = '-'))
library(dplyr)
df_plot <- df_plot %>%#
group_by(cohort) %>%#
arrange(year_of_LT) %>%#
mutate(number_prev_year = lag(number),#
number_Y_00 = number[which(year_of_LT == 'Y_00')]) %>%#
ungroup() %>%#
mutate(ret_rate_prev_year = number / number_prev_year,#
ret_rate = number / number_Y_00,#
year_cohort = paste(year_of_LT, cohort, sep = '-'))
df_plot
cohorts
df_plot <- melt( cohorts, id.vars = "cohort", value.name = "number", variable.name = "year_of_LT" )
head(df_plot)
head(df_plot,20)
df_plot %>%#
group_by(cohort) %>%#
arrange(year_of_LT)
data.table(df_plot)
?lag
df_plot %>%#
           group_by(cohort) %>% # sort the lifetime by each cohort #
           arrange(year_of_LT) %>%#
           mutate( number_prev_year = lag(number),#
                   number_Y_00 = number[ which( year_of_LT == "Y_00" ) ] )
data.frame( df_plot %>%#
		   group_by(cohort) %>% # sort the lifetime by each cohort #
		   arrange(year_of_LT) %>%#
		   mutate( number_prev_year = lag(number),#
				   number_Y_00 = number[ which( year_of_LT == "Y_00" ) ] ) )
1402 / NA
df_plot <- df_plot %>%#
           group_by(cohort) %>% # sort the lifetime by each cohort #
           arrange(year_of_LT) %>%#
           mutate( number_prev_year = lag(number),#
                   number_Y_00 = number[ which( year_of_LT == "Y_00" ) ] ) %>%#
           ungroup() %>%#
           mutate( ret_rate_prev_year = number / number_prev_year,#
                   ret_rate = number / number_Y_00,#
                   year_cohort = paste( year_of_LT, cohort, sep = "-" ) )
df_plot
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_point()
library(ggplot2)
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_point()
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_point( aes( size = number ), alpha = 0.8 ) + #
geom_line(size = 2, alpha = 0.3) +#
labs( x = "Cohorts", y = "Retention Rate by Year of Lifetime", #
      title = "Customer Retention Rate - Falling Drops chart" )
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_line(size = 2, alpha = 0.3) +#
geom_point( aes( size = number ), alpha = 0.8 ) + #
labs( x = "Cohorts", y = "Retention Rate by Year of Lifetime", #
      title = "Customer Retention Rate - Falling Drops chart" )
df_plot
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_line(size = 2, alpha = 0.3) +#
geom_point( aes( size = number ), alpha = 0.8 ) + #
scale_y_continuous( limits = c( 0, 1 ) ) +#
labs( x = "Cohorts", y = "Retention Rate by Year of Lifetime", #
      title = "Customer Retention Rate - Falling Drops chart" )
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_line(size = 2, alpha = 0.3) +#
geom_point( aes( size = number ), alpha = 0.8 ) + #
# scale_y_continuous( limits = c( 0, 1 ) ) +#
labs( x = "Cohorts", y = "Retention Rate by Year of Lifetime", #
      title = "Customer Retention Rate - Falling Drops chart" )
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_line(size = 2, alpha = 0.3) +#
geom_point( aes( size = number ), alpha = 0.8 ) + #
theme( axis.text.x = element_text( size = 10, angle = 90, hjust = .5, vjust = .5, face = "plain" ) ) + #
labs( x = "Cohorts", y = "Retention Rate by Year of Lifetime", #
      title = "Customer Retention Rate - Falling Drops chart" )
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_line(size = 2, alpha = 0.3) +#
geom_point( aes( size = number ), alpha = 0.8 ) + #
theme( axis.text.x = element_text( size = 10, angle = 90, hjust = .5, vjust = .5 ) ) + #
labs( x = "Cohorts", y = "Retention Rate by Year of Lifetime", #
      title = "Customer Retention Rate - Falling Drops chart" )
df_plot
?scale_size
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_line(size = 2, alpha = 0.3) +#
geom_point( aes( size = number ), alpha = 0.8 ) + #
scale_size( range = c( 15, 40 ) ) + #
theme( axis.text.x = element_text( size = 10, angle = 90, hjust = .5, vjust = .5 ) ) + #
labs( x = "Cohorts", y = "Retention Rate by Year of Lifetime", #
      title = "Customer Retention Rate - Falling Drops chart" )
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_line(size = 2, alpha = 0.3) +#
geom_point( aes( size = number ), alpha = 0.8 ) + #
scale_size_continuous( range = c( 15, 40 ) ) + #
theme( axis.text.x = element_text( size = 10, angle = 90, hjust = .5, vjust = .5 ) ) + #
labs( x = "Cohorts", y = "Retention Rate by Year of Lifetime", #
      title = "Customer Retention Rate - Falling Drops chart" )
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_line(size = 2, alpha = 0.3) +#
geom_point( aes( size = number ), alpha = 0.8 ) + #
scale_size( range = c( 5, 15 ) ) + #
theme( axis.text.x = element_text( size = 10, angle = 90, hjust = .5, vjust = .5 ) ) + #
labs( x = "Cohorts", y = "Retention Rate by Year of Lifetime", #
      title = "Customer Retention Rate - Falling Drops chart" )
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_line(size = 2, alpha = 0.3) +#
geom_point( aes( size = number ), alpha = 0.8 ) + #
scale_size( range = c( 5, 15 ) ) + #
theme( axis.text.x = element_text( size = 10, angle = 90, hjust = .5 ) ) + #
labs( x = "Cohorts", y = "Retention Rate by Year of Lifetime", #
      title = "Customer Retention Rate - Falling Drops chart" )
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_line(size = 2, alpha = 0.3) +#
geom_point( aes( size = number ), alpha = 0.8 ) + #
scale_size( range = c( 5, 15 ) ) + #
theme( axis.text.x = element_text( size = 10, angle = 90 ) ) + #
labs( x = "Cohorts", y = "Retention Rate by Year of Lifetime", #
      title = "Customer Retention Rate - Falling Drops chart" )
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_line(size = 2, alpha = 0.3) +#
geom_point( aes( size = number ), alpha = 0.8 ) + #
# scale_size( range = c( 5, 15 ) ) + #
theme( axis.text.x = element_text( size = 10, angle = 90 ) ) + #
labs( x = "Cohorts", y = "Retention Rate by Year of Lifetime", #
      title = "Customer Retention Rate - Falling Drops chart" )
?scale_size
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_line(size = 2, alpha = 0.3) +#
geom_point( aes( size = number ), alpha = 0.8 ) + #
scale_size( range = c( 2, 10 ) ) + #
theme( axis.text.x = element_text( size = 10, angle = 90 ) ) + #
labs( x = "Cohorts", y = "Retention Rate by Year of Lifetime", #
      title = "Customer Retention Rate - Falling Drops chart" )
library(plotly)
p <- ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_line(size = 2, alpha = 0.3) +#
geom_point( aes( size = number ), alpha = 0.8 ) + #
scale_size( range = c( 2, 10 ) ) + #
theme( axis.text.x = element_text( size = 10, angle = 90 ) ) + #
labs( x = "Cohorts", y = "Retention Rate by Year of Lifetime", #
      title = "Customer Retention Rate - Falling Drops chart" )#
#
gg <- ggplotly(p)
gg
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_line(size = 2, alpha = 0.3) +#
geom_point( aes( size = number ), alpha = 0.8 ) + #
scale_size( range = c( 2, 10 ) ) + #
theme( axis.text.x = element_text( size = 10, angle = 90 ) ) + #
labs( x = "Cohorts", y = "Retention Rate by Year of Lifetime", #
      title = "Customer Retention Rate - Falling Drops chart" )
df_plot
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_line(size = 2, alpha = 0.3) +#
geom_point( aes( size = number ), alpha = 0.8 ) + #
scale_size( range = c( 2, 10 ) ) + #
theme( axis.text.x = element_text( size = 10, angle = 90 ) ) + #
labs( x = "Cohorts", y = "Retention Rate by Year of Lifetime", #
      title = "Customer Retention Rate - Falling Drops chart" )
cohorts
ggplot( df_plot, aes( x = cohort, y = ret_rate, group = cohort, color = year_of_LT ) ) +#
geom_line(size = 2, alpha = 0.3) +#
geom_point( aes( size = number ), alpha = 0.8 ) + #
scale_size( range = c( 2, 10 ) ) + #
theme( axis.text.x = element_text( size = 10, angle = 90 ) ) + #
labs( x = "Cohorts", y = "Retention Rate by Year of Lifetime", #
      title = "Customer Retention Rate - Falling Drops chart" )
baseline  <- 0.1  # baseline conversion rate #
delta     <- 0.02 # minimum detectable boundary ( practical significance boundary )#
power     <- 0.8  # sensitivity #
sig_level <- 0.05 # specificity #
#
result <- power.prop.test( p1 = baseline, p2 = baseline + delta, #
                           power = power, sig.level = sig_level,#
                           alternative = "two.sided" )#
round(result$n)#
# ------------------------------------------------------------------#
#               Analyze the result  #
# ------------------------------------------------------------------#
#
# parameters #
count_control    <- 974#
sizes_control    <- 10072#
count_experiment <- 1242#
sizes_experiment <- 9886#
#
ABTest <- function( count_control = count_control, #
                    sizes_control = sizes_control,#
                    count_experiment = count_experiment, #
                    sizes_experiment = sizes_experiment )#
{#
    # probability of each group #
    p_control <- count_control / sizes_control#
    p_experiment <- count_experiment / sizes_experiment#
#
    # @p : pooled probability#
    # @std_error pooled standard deviation (error ) #
    p <- ( count_control + count_experiment ) / ( sizes_experiment + sizes_control )#
    std_error <- sqrt( p * ( 1 - p ) * ( 1 / sizes_control + 1 / sizes_experiment ) )#
#
    # 95 percent confidence interval's z score = 1.96#
    difference <- p_experiment - p_control#
    confidence <- difference + c( -1, 1 ) * 1.96 * std_error#
#
    return( data.frame( lower = confidence[1], #
                        mean  = difference,#
                        upper = confidence[2] ) )#
}#
#
confidence <- ABTest( count_control = count_control, #
                      sizes_control = sizes_control,#
                      count_experiment = count_experiment, #
                      sizes_experiment = sizes_experiment )#
# fixed artifical plot#
# using delta = 0.02 as the minimum detectable boundary #
library(ggplot2)#
#
scenario <- as.character(2:6)#
lower <- c( -0.008, 0.01, -0.025, -0.005, 0.015   )#
mean  <- c( 0.01, 0.015, 0.005, 0.025, 0.025 )#
upper <- c( 0.018, 0.018, 0.03, 0.04, 0.03 )#
#
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( scenario = "1", confidence ), examples )#
examples$scenario <- factor( examples$scenario, levels = as.character(6:1) )#
#
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" ) +#
scale_color_discrete( breaks = as.character(1:6) ) +  #
labs( title = "Different Scenarios of Confidence Interval",#
      x = "confidence interval" )
0.03 - 0.005
0.005 - 0.025
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" ) +#
scale_color_discrete( breaks = as.character(1:6) ) +  #
labs( title = "Different Scenarios of Confidence Interval",#
      x = "confidence interval" )
0.04 - 0.025
0.025 - 0.015
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" ) +#
scale_color_discrete( breaks = as.character(1:6) ) +  #
labs( title = "Different Scenarios of Confidence Interval",#
      x = "confidence interval" )
0.025 --0.005
0.03 + 0.025
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" ) +#
scale_color_discrete( breaks = as.character(1:6) ) +  #
labs( title = "Different Scenarios of Confidence Interval",#
      x = "confidence interval" )
0.025 -0.015
scenario <- as.character(2:6)#
lower <- c( -0.008, 0.012, -0.02, -0.005, 0.015   )#
mean  <- c( 0.01, 0.015, 0.005, 0.025, 0.025 )#
upper <- c( 0.018, 0.018, 0.03, 0.055, 0.035 )#
0.03 + 0.025 -0.015#
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( scenario = "1", confidence ), examples )#
examples$scenario <- factor( examples$scenario, levels = as.character(6:1) )#
#
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" ) +#
scale_color_discrete( breaks = as.character(1:6) ) +  #
labs( title = "Different Scenarios of Confidence Interval",#
      x = "confidence interval" )
0.05 --0.008
0.05 + 0.058
scenario <- as.character(2:6)#
lower <- c( -0.008, 0.012, -0.02, -0.005, 0.015   )#
mean  <- c( 0.05, 0.015, 0.005, 0.025, 0.025 )#
upper <- c( 0.108, 0.018, 0.03, 0.055, 0.035 )#
0.03 + 0.05 + 0.058#
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( scenario = "1", confidence ), examples )#
examples$scenario <- factor( examples$scenario, levels = as.character(6:1) )#
#
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" ) +#
scale_color_discrete( breaks = as.character(1:6) ) +  #
labs( title = "Different Scenarios of Confidence Interval",#
      x = "confidence interval" )
0.005 --0.008
0.005 +  0.013
scenario <- as.character(2:6)#
lower <- c( -0.008, 0.011, -0.02, -0.005, 0.015   )#
mean  <- c( 0.005, 0.014, 0.005, 0.025, 0.025 )#
upper <- c( 0.018, 0.017, 0.03, 0.055, 0.035 )#
#0.03 + 0.005 +  0.013#
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( scenario = "1", confidence ), examples )#
examples$scenario <- factor( examples$scenario, levels = as.character(6:1) )#
#
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" ) +#
scale_color_discrete( breaks = as.character(1:6) ) +  #
labs( title = "Different Scenarios of Confidence Interval",#
      x = "confidence interval" )
scenario <- as.character(2:6)#
lower <- c( -0.008, 0.011, -0.025, -0.005, 0.015   )#
mean  <- c( 0.005, 0.014, 0.005, 0.025, 0.025 )#
upper <- c( 0.018, 0.017, 0.035, 0.055, 0.035 )#
#0.03 + 0.005 +  0.013#
examples <- data.frame( scenario, lower, mean, upper )#
examples <- rbind( cbind( scenario = "1", confidence ), examples )#
examples$scenario <- factor( examples$scenario, levels = as.character(6:1) )#
#
ggplot( examples, aes( mean, scenario, color = scenario ) ) + #
geom_point() + #
geom_errorbarh( aes( xmin = lower, xmax = upper ), height = 0.1 ) + #
geom_vline( xintercept = 0, color = "black" ) + #
geom_vline( xintercept = delta, color = "blue", linetype = "dotted" ) + #
geom_vline( xintercept = -delta, color = "blue", linetype = "dotted" ) +#
scale_color_discrete( breaks = as.character(1:6) ) +  #
labs( title = "Different Scenarios of Confidence Interval",#
      x = "confidence interval" )
data <- c( 7029, 113407, 84843, 104994, 99327, 92052, 60684 )#
sd(data) / length(data)
sd(data)
mean(data)#
sd(data) / length(data)
mean(data) + c( -1, 1 ) * sd(data) / length(data)
mean(data) + c( -1, 1 ) * sd(data) / sqrt( length(data) )
qnorm( 0.95 )
qnorm( 0.975 )
qnorm( 0.975, lower.tail = FLASE )
qnorm( 0.975, lower.tail = FALSE )
N <- 100#
p <- 0.2
rbinom( N, 1, p )
mean( rbinom( N, 1, p ) )
num_replications <- 2000#
replications <- replicate( num.replications, mean( rbinom( N, 1, p ) ) )
replications <- replicate( num_replications, mean( rbinom( N, 1, p ) ) )
replications
quantile( replications, c(0.025, 0.975) )
library(ggplot2)
replications
library(data.table)
dt <- data.table( replications )
dt
ggplot( dt, aes( replications ) ) + #
geom_histogram()
ggplot( dt, aes( replications ) ) + #
geom_histogram( binwidth = 25 )
ggplot( dt, aes( replications ) ) + #
geom_histogram( binwidth = 8 )
ggplot( dt, aes( replications ) ) + #
geom_histogram( binwidth = 2 )
ggplot( dt, aes( replications ) ) + #
geom_histogram( binwidth = 35 )
geom_histogram
ggplot( dt, aes( replications ) ) + #
geom_histogram( binwidth = 0.8 )
ggplot( dt, aes( replications ) ) + #
geom_histogram( )
ggplot( dt, aes( replications ) ) + #
geom_histogram( binwidth = 0.01 )
data.frame( replications )
ggplot( data.table( replications ), aes( replications ) ) + #
geom_histogram( binwidth = 0.01 )
library(dplyr)
run.experiment <- function( n, ate )#
{#
    data.frame(#
        y0 = rnorm( n, mean = 10, sd = 3 )#
    ) %>%#
    mutate(#
        y1 = y0 + ate,#
        D = rbinom(n, 1, 0.5),#
        y = D*y1 + (1-D)*y0#
    )#
}#
#
my.experiment <- run.experiment(2000, 2.0)
head(my.experiment)
ggplot( my.experiment, aes( y ) ) + #
facet_wrap( D ~ ) + #
geom_histogram()
ggplot( my.experiment, aes( y ) ) + #
facet_wrap( D ~  .) + #
geom_histogram()
ggplot( my.experiment, aes( y ) ) + #
facet_wrap( D ~.) + #
geom_histogram()
ggplot( my.experiment, aes( y ) ) + #
facet_wrap( D) + #
geom_histogram()
ggplot( my.experiment, aes( y ) ) + #
facet_grid( D ~ . ) + #
geom_histogram()
ggplot( my.experiment, aes( y ) ) + #
facet_wrap( ~ D ) + #
geom_histogram()
ggplot( my.experiment, aes( y ) ) + #
facet_wrap( ~ D, ncol = 1 ) + #
geom_histogram()
ggplot( my.experiment, aes( y ) ) + #
facet_grid( D ~ . ) + #
geom_histogram()
?coeftest
( 2500 / 50000 ) * ( 2500 / 50000 ) * ( 1 / 50000 ) * ( 1 / 50000 )
sqrt( ( 2500 / 50000 ) * ( 2500 / 50000 ) * ( 1 / 50000 ) * ( 1 / 50000 ) )
library(scales)
p <- sqrt( ( 2500 / 50000 ) * ( 2500 / 50000 ) * ( 1 / 50000 ) * ( 1 / 50000 ) )
comma(p)
get_z_star = function(alpha) {#
    return(-qnorm(alpha / 2))#
}#
#
# Inputs:#
#   z-star: The z-critical value#
#   s: The variance of the metric at N=1#
#   d_min: The practical significance level#
#   N: The sample size of each group of the experiment#
# Returns: The beta value of the two-tailed test#
get_beta = function(z_star, s, d_min, N) {#
    SE = s /  sqrt(N)#
    return(pnorm(z_star * SE, mean=d_min, sd=SE))#
}#
#
# Inputs:#
#   s: The variance of the metric with N=1 in each group#
#   d_min: The practical significance level#
#   Ns: The sample sizes to try#
#   alpha: The desired alpha level of the test#
#   beta: The desired beta level of the test#
# Returns: The smallest N out of the given Ns that will achieve the desired#
#          beta. There should be at least N samples in each group of the experiment.#
#          If none of the given Ns will work, returns -1. N is the number of#
#          samples in each group.#
#
required_size = function(s, d_min, Ns=1:20000, alpha=0.05, beta=0.2) {#
    for (N in Ns) {#
        if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {#
            return(N)#
        }#
    }#
    return(-1)#
}#
#
# Example analytic usage#
# This is the example from Lesson 1, for which the online calculate gave 3,623#
# samples in each group#
#
# s is the pooled standard error for N=1 in each group,#
# which is sqrt(p*(1-p)*(1/1 + 1/1))#
required_size(s=sqrt(0.1*0.9*2), d_min=0.02)
sqrt( 0.5 * 0.5 * ( 1 / 64454 + 1 / 61818 ) )
sqrt( 0.5 * 0.5 * / ( 64454 + 61818 ) )
sqrt( 0.5 * 0.5 / ( 64454 + 61818 ) )
qnorm( 0.975 )
( 64454 + 61818 ) * 0.5
sqrt( ( 64454 + 61818 ) * 0.5 * 0.5 )
sqrt( 0.5 * 0.5 / ( 15348 + 15312 ) )
sqrt( 0.5 * 0.5 / ( 15348 + 15312 ) ) * 1.96
5 + c( -1, 1 ) * sqrt( 0.5 * 0.5 / ( 15348 + 15312 ) ) * 1.96
0.5 + c( -1, 1 ) * sqrt( 0.5 * 0.5 / ( 15348 + 15312 ) ) * 1.96
sqrt( 0.5 * 0.5 / ( 15348 + 15312 ) )
sqrt( (15348 + 15312) * 0.5 * 0.5 ) / sqrt( 15348 + 15312 )
sqrt( (15348 + 15312) * 0.5 * 0.5 )
sqrt( 63136 * 0.5 * 0.5 )
sqrt( 63136 * 0.5 * 0.5 ) * 1.96
sqrt( 126272 * 0.5 * 0.5 )
126272 * 0.5 + c( -1, 1 ) * sqrt( 126272 * 0.5 * 0.5 ) * 1.96
library(vtreat)
library(ggplot2)
make_cats = function() {#
  small_cat = c("red", "blue", "green", "pink", "magenta")#
  sc_means = 3*runif(length(small_cat))#
  names(sc_means) = small_cat#
  sc_probs = c(0.3, 0.3, 0.3, 0.05, 0.05)#
#
  large_cat = paste("v", 1:200, sep="_")#
  lc_means = 2*runif(length(large_cat))#
  names(lc_means) = large_cat#
#
  list(sc_means=sc_means,#
       sc_probs=sc_probs,#
       lc_means=lc_means)#
}#
#
make_data = function(N, na_rate,#
                     sc_means, sc_probs,#
                     lc_means) {#
#
  small_cat = names(sc_means)#
  large_cat = names(lc_means)#
#
  x1 = rnorm(N)#
  x1 = ifelse(runif(N) < na_rate, NA, x1)#
#
  x2 = sample(small_cat, size=N, replace=TRUE, prob=sc_probs)#
  x3 = sample(large_cat, size=N, replace=TRUE)#
#
  y = ifelse(is.na(x1), -1, x1) + #
    sc_means[x2] + #
    lc_means[x3] + rnorm(N)#
#
  data.frame(x1=x1, x2=x2, x3=x3, y = y)#
#
}#
#
set.seed(233542)#
cats = make_cats()#
na_rate = 0.01#
#
train = make_data(1000, na_rate, cats$sc_means, cats$sc_probs, cats$lc_means)#
calib = make_data(500, na_rate, cats$sc_means, cats$sc_probs, cats$lc_means)#
calibBig = make_data(2000, na_rate, cats$sc_means, cats$sc_probs, cats$lc_means)#
test = make_data(1000, na_rate, cats$sc_means, cats$sc_probs, cats$lc_means)
train
summary(train)
fmla = "y ~ x1 + x2 + x3"#
model = lm(fmla, data=train)
model
smod = summary(model)#
print(paste("R-squared = ", smod$r.squared, "Adjusted R-squared = ", smod$adj.r.squared))
test$pred = tryCatch(#
      predict(model, newdata=test),#
      error=function(e) {print(e); NULL}#
)
rmse = sqrt(mean((test$y - test$pred)^2, na.rm=TRUE))#
print(paste("mean(y) = ", mean(test$y), "stdev(y) = ", sd(test$y), "rmse = ", rmse))
ggplot(test, aes(x=pred, y=y)) + geom_point(alpha=0.5) + geom_abline(color="blue")
outcome = "y"#
varlist = setdiff(colnames(calib), outcome)#
#
# try this with just the default settings#
treatplan = designTreatmentsN(calib, varlist, outcome)#
# look at the score frame#
print(treatplan$scoreFrame)
?sd
library(dplyr)#
library(data.table)#
setwd("/Users/ethen/Desktop/loan_prediction/data")#
#
data_train <- fread( "cs-training.csv", select = 2:12 )#
FeatureEngineering <- function( data_train, is_train, breaks )#
{#
    # replacing columns names that contains "-" with "To"#
    columns_containing_hyphen <- grep( "-", colnames(data_train), value = TRUE )#
    setnames( data_train, columns_containing_hyphen, gsub( "-", "To", columns_containing_hyphen ) )#
#
    data_train[ , SeriousDlqin2yrs := as.factor(SeriousDlqin2yrs) ]#
#
    # record rows where both columns are NAs  #
    # since whenever NumberOfDependents is missing MonthlyIncome is also missing #
    # we won't record it #
    data_train[ , bothNA := ifelse( is.na(NumberOfDependents) & is.na(MonthlyIncome),#
                                    "Yes", "NO" ) ]#
    # data_train[ , MonthlyIncomeNA := ifelse( !is.na(NumberOfDependents) & is.na(MonthlyIncome),   #
    #                                          "Yes", "NO" ) ]#
    # replace missing NumberOfDependents with 0, #
    # since the mean is 0 and the median is less than 1 #
    data_train[ , NumberOfDependents := ifelse( is.na(NumberOfDependents), #
                                                0, NumberOfDependents ) ]#
#
    # convert monthly income into bins determined by the log #
    log_income <- log( data_train$MonthlyIncome + 1 )#
#
    if(is_train)#
    {#
        log_income_breaks <- quantile( log_income, na.rm = TRUE )#
        log_income_bins   <- cut( log_income, #
                                  breaks = log_income_breaks, #
                                  include.lowest = TRUE )#
    }else#
        log_income_bins <- cut( log_income, #
                                breaks = breaks, #
                                include.lowest = TRUE )#
#
    data_train[ , MonthlyIncome := #
    { #
        temp <- ifelse( is.na(MonthlyIncome), "missing", log_income_bins ) %>%#
                as.factor() #
    }]#
#
    if( is_train )#
        return( list( data_train = data_train, breaks = log_income_breaks ) )#
    else#
        return(data_train)#
}#
#
train_info <- FeatureEngineering( data_train, is_train = TRUE )#
#
train_info$data_train
library(dplyr)#
library(data.table)#
setwd("/Users/ethen/Desktop/loan_prediction/data")#
#
data_train <- fread( "cs-training.csv", select = 2:12 )#
FeatureEngineering <- function( data_train, is_train, breaks )#
{#
    # replacing columns names that contains "-" with "To"#
    columns_containing_hyphen <- grep( "-", colnames(data_train), value = TRUE )#
    setnames( data_train, columns_containing_hyphen, gsub( "-", "To", columns_containing_hyphen ) )#
#
    data_train[ , SeriousDlqin2yrs := as.factor(SeriousDlqin2yrs) ]#
#
    # record rows where both columns are NAs  #
    # since whenever NumberOfDependents is missing MonthlyIncome is also missing #
    # we won't record it #
    data_train[ , bothNA := ifelse( is.na(NumberOfDependents) & is.na(MonthlyIncome),#
                                    "Yes", "NO" ) ]#
    # data_train[ , MonthlyIncomeNA := ifelse( !is.na(NumberOfDependents) & is.na(MonthlyIncome),   #
    #                                          "Yes", "NO" ) ]#
    # replace missing NumberOfDependents with 0, #
    # since the mean is 0 and the median is less than 1 #
    data_train[ , NumberOfDependents := ifelse( is.na(NumberOfDependents), #
                                                0, NumberOfDependents ) ]#
#
    # convert monthly income into bins determined by the log #
    log_income <- log( data_train$MonthlyIncome + 1 )#
#
    if(is_train)#
    {#
        log_income_breaks <- quantile( log_income, na.rm = TRUE )#
        log_income_bins   <- cut( log_income, #
                                  breaks = log_income_breaks, #
                                  include.lowest = TRUE )#
    }else#
        log_income_bins <- cut( log_income, #
                                breaks = breaks, #
                                include.lowest = TRUE )#
#
    data_train[ , MonthlyIncome := #
    { #
        temp <- ifelse( is.na(MonthlyIncome), "missing", log_income_bins ) %>%#
                as.factor() #
    }]#
#
    if( is_train )#
        return( list( data_train = data_train, breaks = log_income_breaks ) )#
    else#
        return(data_train)#
}#
#
train_info <- FeatureEngineering( data_train, is_train = TRUE )#
#
train_info$data_train
train_info$data_train
